@startuml

package backend.model {
    class Point {
        - double x
        - double y
        + double getX()
        + double getY()
        + void setX(double x)
        + void setY(double y)
        + String toString()
    }

    abstract class Figure {
        - Point startPoint
        - Point endPoint
        - Color color
        - Color secondaryColor
        - ShadowType shadowType
        - LineType lineType
        - double LineWidth
        - int layer
        - boolean showable
        + Figure(Point startPoint, Point endPoint)
        + String toString()
        + void cloneProperties(Figure figure)
        + Figure clone()
        + Figure[] divide()
        + Point getStartPoint()
        + Point getEndPoint()
        + abstract void draw(double diffX, double diffY)
        + abstract boolean containsPoint(Point point)
        + void moveToCenter(double centerX, double centerY)
    }

    class Ellipse extends Figure {
        - Point centerPoint
        - double sMayorAxis
        - double sMinorAxis
        - Color color
        - Color secondaryColor
        - ShadowType shadowType
        - LineType lineType
        - int layer
        - boolean showable
        + Ellipse(Point startPoint, Point endPoint)
        + String toString()
        + Point getCenterPoint()
        + double getsMayorAxis()
        + double getsMinorAxis()
        + void setsMayorAxis(double sMayorAxis)
        + void setsMinorAxis(double sMinorAxis)
        + void draw(double diffX, double diffY)
        + boolean containsPoint(Point point)
        + Ellipse clone()
        + Figure[] divide()
        + void moveToCenter(double centerX, double centerY)
    }

    class Circle extends Ellipse {
        - double radius
        + Circle(Point startPoint, Point endPoint)
        + String toString()
        + boolean containsPoint(Point point)
    }

    class Rectangle extends Figure {
        + Rectangle(Point startPoint, Point endPoint)
        + String toString()
        + void draw(double diffX, double diffY)
        + boolean containsPoint(Point point)
    }

    class Square extends Rectangle {
        + Square(Point startPoint, Point endPoint)
        + String toString()
        + void draw(double diffX, double diffY)
        + boolean containsPoint(Point point)
    }

    enum LineType {
        - double[] dashes
        + double[] getDashes()
    }

    enum ShadowType {
        -double offset
        +double getOffset()
    }
}

package backend {
    class CanvasState {
        - Figure[] figures
        - Point startPoint
        - Point endPoint
        - Color primaryColor
        - Color secondaryColor
        - ShadowType shadowType
        - LineType lineType
        - double LineWidth
        - int selectedLayer
        + CanvasState()
        + void addFigure(Figure figure)
        + Figure getFigureAtPoint(Point point)
        + void removeFigure(Figure figure)
        + void moveFigureToLayer(Figure figure, int layer)
        + Figure[] getFigures()
        + void clearCanvas()
    }
}

package frontend {
    class AppLauncher {
    }

    class MainFrame {
    }

    class PaintPane {
    }

    class StatusPane {
    }

    class AppMenuBar {
    }

    package Buttons {
        package ToolButtons {
            class ToolButton {
                + ToolButton()
                + void onMousePressed(PaintPane paintPane, double x, double y)
                + void onMouseDragged(PaintPane paintPane, double x, double y)
                + void onMouseReleased(PaintPane paintPane, double x, double y)
            }

            class AddLayerToolButton extends ToolButton {
            }

            class CenterToolButton extends ToolButton {
            }

            class CircleToolButton extends ToolButton {
            }

            class DeleteLayerToolButton extends ToolButton {
            }

            class DeleteToolButton extends ToolButton {
            }

            class DivideToolButton extends ToolButton {
            }

            class DuplicateToolButton extends ToolButton {
            }

            class EllipseToolButton extends ToolButton {
            }

            class RectangleToolButton extends ToolButton {
            }

            class SelectionToolButton extends ToolButton {
            }

            class SquareToolButton extends ToolButton {
            }
        }

        package RadioButton {
            class HideLayerRadioButton {
            }

            class ShowLayerRadioButton {
            }
        }

        package Slider {
            class LineWithSliderButton {
            }
        }
    }

    package Renders {
        abstract class FigureRenderer {
            + abstract void render(Figure figure, GraphicsContext gc)
            + void renderShadow(Figure figure, GraphicsContext gc, Color color)
            + Paint getColorGradiant(Figure figure)
        }

        class CircleRenderer extends EllipseRenderer {
        }

        class SquareRenderer extends RectangleRenderer {
        }

        class RectangleRenderer extends FigureRenderer {
            + void render(Figure figure, GraphicsContext gc)
            + Paint getColorGradiant(Figure figure)
        }

        class EllipseRenderer extends FigureRenderer {
            + void render(Figure figure, GraphicsContext gc)
            + Paint getColorGradiant(Figure figure)
        }
    }
}

frontend.AppLauncher --> backend.CanvasState
frontend.MainFrame --> backend.CanvasState
frontend.PaintPane --> backend.CanvasState
frontend.PaintPane --> frontend.StatusPane
frontend.MainFrame --> frontend.PaintPane
frontend.MainFrame --> frontend.AppMenuBar
frontend.MainFrame --> frontend.StatusPane
frontend.PaintPane --> backend.model.Figure
frontend.PaintPane --> backend.model.Point
frontend.PaintPane --> frontend.Renders.FigureRenderer

@enduml
