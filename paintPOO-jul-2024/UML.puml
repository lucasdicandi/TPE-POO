@startuml

package backend.model {
    class Point {
        - double x
        - double y
        + double getX()
        + double getY()
        + void setX(double x)
        + void setY(double y)
        + String toString()
    }

    abstract class Figure {
        - Point startPoint
        - Point endPoint
        + Figure(Point startPoint, Point endPoint)
        + String toString()
        + Point getStartPoint()
        + Point getEndPoint()
        + abstract double area()
        + abstract double perimeter()
        + abstract void draw(double diffX, double diffY)
        + abstract boolean containsPoint(Point point)
    }

    class Ellipse extends Figure {
        - Point centerPoint
        - double sMayorAxis
        - double sMinorAxis
        + Ellipse(Point startPoint, Point endPoint)
        + String toString()
        + Point getCenterPoint()
        + double getsMayorAxis()
        + double getsMinorAxis()
        + void setsMayorAxis(double sMayorAxis)
        + void setsMinorAxis(double sMinorAxis)
        + double area()
        + double perimeter()
        + void draw(double diffX, double diffY)
        + boolean containsPoint(Point point)
        + Ellipse clone()
    }

    class Circle extends Ellipse {
        - double radius
        + Circle(Point startPoint, Point endPoint)
        + String toString()
        + double getRadius()
        + boolean containsPoint(Point point)
    }

    class Rectangle extends Figure {
        + Rectangle(Point startPoint, Point endPoint)
        + String toString()
        + double area()
        + double perimeter()
        + void draw(double diffX, double diffY)
        + boolean containsPoint(Point point)
    }

    class Square extends Rectangle {
        + Square(Point startPoint, Point endPoint)
        + String toString()
        + boolean containsPoint(Point point)
    }
}

package backend {
    class CanvasState {
        - List<Figure> list
        + void addFigure(Figure figure)
        + void removeFigure(Figure figure)
        + void clearCanvas()
    }

    abstract class ToolButton {
        + void onMousePressed(PaintPane paintPane, double x, double y)
        + void onMouseReleased(PaintPane paintPane, double x, double y)
    }

    class EllipseToolButton extends ToolButton {
        + EllipseToolButton()
        + void onMousePressed(PaintPane paintPane, double x, double y)
        + void onMouseReleased(PaintPane paintPane, double x, double y)
    }

    class MoveToCenterToolButton extends ToolButton {
        + MoveToCenterToolButton(PaintPane paintPane)
        + void onMouseClicked(PaintPane paintPane, double x, double y)
    }

    class RectangleToolButton extends ToolButton {
        + RectangleToolButton()
        + void onMousePressed(PaintPane paintPane, double x, double y)
        + void onMouseReleased(PaintPane paintPane, double x, double y)
    }

    class SelectionToolButton extends ToolButton {
        + SelectionToolButton()
        + void onMouseClicked(PaintPane paintPane, double x, double y)
    }

    class ShadowToolButton extends ChoiceBox {
    }

    class SquareToolButton extends ToolButton {
        + SquareToolButton()
        + void onMousePressed(PaintPane paintPane, double x, double y)
        + void onMouseReleased(PaintPane paintPane, double x, double y)
    }

    class CircleToolButton extends ToolButton {
        + CircleToolButton()
        + void onMousePressed(PaintPane paintPane, double x, double y)
        + void onMouseReleased(PaintPane paintPane, double x, double y)
    }

    class CenterToolButton extends ToolButton {
        + CenterToolButton(PaintPane paintPane)
        + void onMouseClicked(PaintPane paintPane, double x, double y)
    }
}



package frontend {
    class AppLauncher {
        +main(args: String[]): void
    }

    class MainFrame {
        -paintPane: PaintPane
        -statusPane: StatusPane
    }

    class PaintPane extends BorderPane {
        -initializeTools(): void
        -initializeUI(): void
        -setupCanvasEvents(): void
        +addFigure(figure: Figure): void
        +redrawCanvas(): void
        +getGc(): GraphicsContext
        +findFigureAtPoint(point: Point): Figure
        +getStartPoint(): Point
        +setStartPoint(startPoint: Point): void
        +getSelectedFigure(): Figure
        +setSelectedFigure(selectedFigure: Figure): void
        +getStatusPane(): StatusPane
        +removeFigure(figure: Figure): void
        +getCanvasState(): CanvasState
        +getCanvasWidth(): double
        +getCanvasHeight(): double
        +getFillColorPickerPrimary(): ColorPicker
        // Additional methods truncated for brevity
    }

    class StatusPane {
        -Label statusLabel;
        +StatusPane()
        +updateStatus(String text)
    }

    class AppMenuBar {
        +AppMenuBar()
    }

    package Buttons {
        abstract class ToolButton{
            public ToolButton(String text);
            +onMousePressed(PaintPane paintPane, double x, double y):void
            +onMouseReleased(PaintPane paintPane, double x, double y):void
            +onMouseClicked(PaintPane paintPane, double x, double y):void
            +onMouseDragged(PaintPane paintPane, double x, double y):void
        }

        class DeleteToolButton extends ToolButton {
            // Attributes and methods specific to DeleteToolButton
        }

        class SquareToolButton extends ToolButton {
            // Attributes and methods specific to SquareToolButton
        }

        class CenterToolButton extends ToolButton {
            // Attributes and methods specific to CenterToolButton
        }

        class MoveToCenterToolButton extends ToolButton {
            // Attributes and methods specific to MoveToCenterToolButton
        }

        class ShadowChoiceBox extends Button {
            // Attributes and methods specific to ShadowChoiceBox
        }

        class DuplicateToolButton extends ToolButton {
            // Attributes and methods specific to DuplicateToolButton
        }

        class CircleToolButton extends ToolButton {
            // Attributes and methods specific to CircleToolButton
        }

        class DivideToolButton extends ToolButton {
            // Attributes and methods specific to DivideToolButton
        }

        class EllipseToolButton extends ToolButton {
            // Attributes and methods specific to EllipseToolButton
        }

        class SelectionToolButton extends ToolButton {
            // Attributes and methods specific to SelectionToolButton
        }

        class RectangleToolButton extends ToolButton {
            // Attributes and methods specific to RectangleToolButton
        }
    }

    package Renders {
        abstract class FigureRenderer {
            +abstract void render(Figure figure, GraphicsContext gc)
            +void renderShadow(Figure figure, GraphicsContext gc, Color color)
        }

        class CircleRenderer extends FigureRenderer {
            // Attributes and methods specific to CircleRenderer
        }

        class SquareRenderer extends FigureRenderer {
            // Attributes and methods specific to SquareRenderer
        }

        class RectangleRenderer extends FigureRenderer {
            // Attributes and methods specific to RectangleRenderer
        }

        class EllipseRenderer extends FigureRenderer {
            // Attributes and methods specific to EllipseRenderer
        }
    }
}

frontend.AppLauncher --> backend.CanvasState
frontend.MainFrame --> backend.CanvasState
frontend.PaintPane --> backend.CanvasState
frontend.PaintPane --> frontend.StatusPane
frontend.MainFrame --> frontend.PaintPane
frontend.MainFrame --> frontend.AppMenuBar
frontend.MainFrame --> frontend.StatusPane
frontend.PaintPane --> backend.model.Figure
frontend.PaintPane --> backend.model.Point
frontend.PaintPane --> frontend.Renders.FigureRenderer

@enduml
