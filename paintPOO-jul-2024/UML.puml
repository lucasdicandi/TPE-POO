@startuml

package backend.model {
    class Point {
        - double x
        - double y
        + double getX()
        + double getY()
        + void setX(double x)
        + void setY(double y)
        + String toString()
    }

    abstract class Figure {
        - Point startPoint
        - Point endPoint
        + Figure(Point startPoint, Point endPoint)
        + String toString()
        + Point getStartPoint()
        + Point getEndPoint()
        + abstract double area()
        + abstract double perimeter()
        + abstract void draw(double diffX, double diffY)
        + abstract boolean containsPoint(Point point)
    }

    class Ellipse extends Figure {
        - Point centerPoint
        - double sMayorAxis
        - double sMinorAxis
        + Ellipse(Point startPoint, Point endPoint)
        + String toString()
        + Point getCenterPoint()
        + double getsMayorAxis()
        + double getsMinorAxis()
        + void setsMayorAxis(double sMayorAxis)
        + void setsMinorAxis(double sMinorAxis)
        + double area()
        + double perimeter()
        + void draw(double diffX, double diffY)
        + boolean containsPoint(Point point)
        + Ellipse clone()
    }

    class Circle extends Ellipse {
        - double radius
        + Circle(Point startPoint, Point endPoint)
        + String toString()
        + double getRadius()
        + boolean containsPoint(Point point)
    }

    class Rectangle extends Figure {
        + Rectangle(Point startPoint, Point endPoint)
        + String toString()
        + double area()
        + double perimeter()
        + void draw(double diffX, double diffY)
        + boolean containsPoint(Point point)
    }

    class Square extends Rectangle {
        + Square(Point startPoint, Point endPoint)
        + String toString()
        + boolean containsPoint(Point point)
    }
}

package backend {
    class CanvasState {
        - List<Figure> list
        + void addFigure(Figure figure)
        + void removeFigure(Figure figure)
        + void clearCanvas()
    }

    abstract class ToolButton {
        + void onMousePressed(PaintPane paintPane, double x, double y)
        + void onMouseReleased(PaintPane paintPane, double x, double y)
    }

    class EllipseToolButton extends ToolButton {
        + EllipseToolButton()
        + void onMousePressed(PaintPane paintPane, double x, double y)
        + void onMouseReleased(PaintPane paintPane, double x, double y)
    }

    class MoveToCenterToolButton extends ToolButton {
        + MoveToCenterToolButton(PaintPane paintPane)
        + void onMouseClicked(PaintPane paintPane, double x, double y)
    }

    class RectangleToolButton extends ToolButton {
        + RectangleToolButton()
        + void onMousePressed(PaintPane paintPane, double x, double y)
        + void onMouseReleased(PaintPane paintPane, double x, double y)
    }

    class SelectionToolButton extends ToolButton {
        + SelectionToolButton()
        + void onMouseClicked(PaintPane paintPane, double x, double y)
    }

    class ShadowToolButton extends ChoiceBox {
    }

    class SquareToolButton extends ToolButton {
        + SquareToolButton()
        + void onMousePressed(PaintPane paintPane, double x, double y)
        + void onMouseReleased(PaintPane paintPane, double x, double y)
    }

    class CircleToolButton extends ToolButton {
        + CircleToolButton()
        + void onMousePressed(PaintPane paintPane, double x, double y)
        + void onMouseReleased(PaintPane paintPane, double x, double y)
    }

    class CenterToolButton extends ToolButton {
        + CenterToolButton(PaintPane paintPane)
        + void onMouseClicked(PaintPane paintPane, double x, double y)
    }
}

frontend.AppLauncher --> backend.CanvasState
frontend.MainFrame --> backend.CanvasState
frontend.PaintPane --> backend.CanvasState
frontend.PaintPane --> frontend.StatusPane
frontend.MainFrame --> frontend.PaintPane
frontend.MainFrame --> frontend.AppMenuBar
frontend.MainFrame --> frontend.StatusPane
frontend.PaintPane --> backend.model.Figure
frontend.PaintPane --> backend.model.Point
frontend.PaintPane --> frontend.Renders.FigureRenderer

package frontend{
    class PaintPane {
    }

    class MainFrame {
    }

    class AppLauncher {
        public void start(Stage primaryStage)
    }

    class StatusPane {
    }

    class AppMenuBar {
    }
}
package frontend.Buttons{
    class DeleteToolButton {
    }

    class SquareToolButton {
    }

    class CenterToolButton {
    }

    class Button {
    }

    class MoveToCenterToolButton {
    }

    class ShadowChoiceBox {
    }

    class ToolButton {
    }

    class DuplicateToolButton {
    }

    class CircleToolButton {
    }

    class DivideToolButton {
    }

    class EllipseToolButton {
    }

    class SelectionToolButton {
    }

    class RectangleToolButton {
    }
}
package frontend.Renders{

    class FigureRenderer {
    }

    class CircleRenderer {
    }

    class SquareRenderer {
    }

    class RectangleRenderer {
    }

    class EllipseRenderer {
    }

}

@enduml
