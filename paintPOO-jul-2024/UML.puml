
@startuml

package backend.model {
    class Point {
        - double x
        - double y
        + double getX()
        + double getY()
        + void setX(double x)
        + void setY(double y)
        + String toString()
    }

    abstract class Figure {
        - Point startPoint
        - Point endPoint
        - Color color
        - Color secondaryColor
        - ShadowType shadowType
        - LineType lineType
        - double LineWidth
        - int layer
        - boolean showable
        + Figure(Point startPoint, Point endPoint)
        + String toString()
        + void cloneProperties(Figure figure)
        + Figure clone()
        + Figure[] divide()
        + Point getStartPoint()
        + Point getEndPoint()
        + abstract void draw(double diffX, double diffY)
        + abstract boolean containsPoint(Point point)
        + void moveToCenter(double centerX, double centerY)
    }

    class Ellipse extends Figure {
        - Point centerPoint
        - double sMayorAxis
        - double sMinorAxis
        + Ellipse(Point startPoint, Point endPoint)
        + String toString()
        + Point getCenterPoint()
        + double getsMayorAxis()
        + double getsMinorAxis()
        + void setsMayorAxis(double sMayorAxis)
        + void setsMinorAxis(double sMinorAxis)
        + void draw(double diffX, double diffY)
        + boolean containsPoint(Point point)
        + Ellipse clone()
        + Figure[] divide()
        + void moveToCenter(double centerX, double centerY)
    }

    class Circle extends Ellipse {
        - double radius
        + Circle(Point startPoint, Point endPoint)
        + String toString()
        + boolean containsPoint(Point point)
    }

    class Rectangle extends Figure {
        + Rectangle(Point startPoint, Point endPoint)
        + String toString()
        + void draw(double diffX, double diffY)
        + boolean containsPoint(Point point)
    }

    class Square extends Rectangle {
        + Square(Point startPoint, Point endPoint)
        + String toString()
        + boolean containsPoint(Point point)
    }
}

package backend {
    class CanvasState {
        - List<Figure> list
        + void addFigure(Figure figure)
        + void removeFigure(Figure figure)
        + List<Figure> getFigures()
        + Figure getFigureAt(Point point)
        + void clear()
    }
}

package frontend {
    class AppLauncher {
        +void start(Stage primaryStage)
    }

    class MainFrame {
        +MainFrame()
        +void initializeComponents()
    }

    class PaintPane {
        - Canvas canvas
        - CanvasState canvasState
        - Figure selectedFigure
        + PaintPane()
        + void redrawCanvas()
        + void addFigure(Figure figure)
        + void removeFigure(Figure figure)
        + Figure getSelectedFigure()
        + void setSelectedFigure(Figure figure)
        + void clearSelection()
        + void moveFigureToCenter(Figure figure)
    }

    class StatusPane {
        +StatusPane()
        + void updateStatus(String status)
    }

    package Buttons {
        package ToolButton{
        abstract class ToolButton {
            +ToolButton(String label)
            +abstract void onMouseClicked(PaintPane paintPane, double x, double y)
        }

        class CenterToolButton extends ToolButton {
            +CenterToolButton()
            +void onMouseClicked(PaintPane paintPane, double x, double y)
        }

        class DivideToolButton extends ToolButton {
            +DivideToolButton()
            +void onMouseClicked(PaintPane paintPane, double x, double y)
        }

        class DuplicateToolButton extends ToolButton {
            +DuplicateToolButton()
            +void onMouseClicked(PaintPane paintPane, double x, double y)
        }

        class CircleToolButton extends ToolButton {
            +CircleToolButton()
            +void onMousePressed(PaintPane paintPane, double x, double y)
            +void onMouseReleased(PaintPane paintPane, double x, double y)
        }

        class EllipseToolButon extends ToolButton{
        }

        class SelectionToolButton extends ToolButton {
            -double initialX
            -double initialY
            +SelectionToolButton()
            +void onMousePressed(PaintPane paintPane, double x, double y)
            +void onMouseReleased(PaintPane paintPane, double x, double y)
            +void onMouseClicked(PaintPane paintPane, double x, double y)
            +void onMouseDragged(PaintPane paintPane, double x, double y)

        }

        class RectangleToolButton extends ToolButton {
            +RectangleToolButton()
            +void onMousePressed(PaintPane paintPane, double x, double y)
                        +void onMouseReleased(PaintPane paintPane, double x, double y)
        }

        class SquareToolButton extends ToolButton{
        }

        class AddLayerToolButton extends ToolButton{
        }

        class DeleteLayerToolButton extends ToolButton{
        }

        class DeleteToolButton extends ToolButton{
        }
        }


    package ChoiceBox{
        class LayerChoiceBox{

        }

        class LineTypeChoiceBox{

        }

        class ShadowChoiceBox{

        }
    }

    package ColorPicker{
        class FillColorPickerPrimary{
        }

        class FillColorPickerSecondary{
        }
    }

    package RadioButton{
        class HideLayerRadioButton{
        }

        class ShowLayerRadioButton{
        }
    }

    package Slider{
        class LinerWithSliderButton{

        }
    }
    }

    package Renders {
        abstract class FigureRenderer {
            +abstract void render(Figure figure, GraphicsContext gc)
            +void renderShadow(Figure figure, GraphicsContext gc, Color color)
        }

        class CircleRenderer extends EllipseRenderer {
        }

        class SquareRenderer extends RectangleRenderer {
        }

        class RectangleRenderer extends FigureRenderer {
            +void render(Figure figure, GraphicsContext gc)
        }

        class EllipseRenderer extends FigureRenderer {
            +void render(Figure figure, GraphicsContext gc)
        }
    }

}

frontend.AppLauncher --> backend.CanvasState
frontend.MainFrame --> backend.CanvasState
frontend.PaintPane --> backend.CanvasState
frontend.PaintPane --> frontend.StatusPane
frontend.MainFrame --> frontend.PaintPane
frontend.MainFrame --> frontend.AppMenuBar
frontend.MainFrame --> frontend.StatusPane
frontend.PaintPane --> backend.model.Figure
frontend.PaintPane --> backend.model.Point
frontend.PaintPane --> frontend.Renders.FigureRenderer

@enduml
